<% /**
*      Copyright (C) 2008 10gen Inc.
*
*    Licensed under the Apache License, Version 2.0 (the "License");
*    you may not use this file except in compliance with the License.
*    You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*    Unless required by applicable law or agreed to in writing, software
*    distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*    See the License for the specific language governing permissions and
*    limitations under the License.
*/

/* If there is one post, show it.  If there is more than one post, display a page
 * of post snippets.  If there are no posts, display a default empty blog page.
 * If we are previewing a draft, just display that post.
 */

if ( ! user ){
    user = Auth.getUser( request );
}

var blog = Blog.urls;
var blogUtils = Blog.blogUtils;

var result = blog.handleRequest(request);

/* check that the ip isn't blocked */
var blocked = BlogUtils.isBlockedIP(request.getRemoteIP());

/*
 *  setup the data transfer object
 */
var blogDTO = new BlogDTO();

/*
 *  if we are adding a comment, handle it and pray that the comment gets added
 */
var isComment = (request && request.addComment == "yes");

if ((isComment && !blocked) || (request.action == "delete" && user.isAdmin())) {
    var r = blog.handlePosts(request, result.posts[0], user);
    if(request.postSuccess){
        blogDTO.clearCaptchaForm();
        session.postMessage = r;
        session.postSuccess = request.postSuccess;
        var pageSize = Ext.getlist(allowModule, 'blog', 'commentsPerPage');
        var uri = request.getURI();
        if(pageSize){
            var newPage = Math.ceil(request.postSuccessNumber / pageSize);
            if(result.pageNumber != newPage){
                uri = uri.replace(/(\/page\/\d+)?$/, '/page/'+newPage);
            }
        }
        // FIXME: figure out which args to keep (the GET args) and keep them
        var u = new URL(uri).toString();
        response.sendRedirectTemporary(u);
        return;
    }
    else {
        blogDTO.setCaptchaForm(request);
    }
}



blogDTO.setUser(user);
blogDTO.setCategories(blogUtils.getCategories());
blogDTO.setBaseURL(routes.find(Blog.routes));
blogDTO.setBlockedIP(blocked);

/*
 *  now, based on what we're doing, choose a template and modify the DTO
 */
var template = null;

blogDTO.setPostArray(result.posts);
blogDTO.setDateFormat("F");

if ( result.previewSnippet ) {
    blogDTO.snippetTemplate = Blog.getTemplate("postSnippet");
    template = blog.getTemplate("postSnippetList");
}
else if ( result.isCategorySearch ) {
    blogDTO.setPageTitle("Category Search Results: "+result.category.label);
    template = blog.getTemplate("postSnippetList");
}
else if ( result.search ) {
    blogDTO.setSearch(result.search);
    blogDTO.setPageTitle("Search Results: "+result.posts.length+(result.posts.length == 1 ? " match for " : " matches for ")+result.search);
    template = blog.getTemplate("postSnippetList");
}
else {
    blogDTO.setDateFormat("F");

    if (result.posts.length == 1) {
        template = blog.getTemplate("post");
    }
    else {
        template = blog.getTemplate("postList");
    }
}

if (template == null) {
	log.blog("ERROR : template = null");
	print("Sorry - programming error.");
	return;
}

log.blogcontroller("Chose template : " + template);

var model = {blogDTO : blogDTO};
var callback = blog.getModelCallback();

/*
 * call the user callback to give user code a chance to add to the model
 */

if (callback != null) {
    var callbackResult = callback(model);

    for (f in callbackResult) {

        if (f == "blogDTO") {
            log.blogcontroller("WARNING : model callback returned a 'blogDTO' object.  Dropping.");
        }
        else {
            model[f] = callbackResult[f];
        }
    }
}

/*
 *  now render the template
 */
template(model);
%>
