<% 
/* 
 * doc.jxp - documentation tool. 
*/

var isCore = request.getHost() == 'corejs.10gen.com';
if( isCore ) {
    print("<h3>10gen Core Libraries Source Code</h3>\n");
}
%>
<style type="text/css">
pre {margin: 8px}
</style>
<pre>
<%
    var expand = request.expand!=0;

    // print the path to the file we are viewing with links up the dir tree
    function breadcrumbs(f) { 
	print("<b>");

	var s = f.split('/');
	var path = '';
	for( var i = 0; i < s.length-1; i++ ) {
	    path = path + s[i] + '/';
	    print('<a href="?f=' + path  + '">' + s[i] + '/</a> ');
	}
	print(s[s.length-1]);

	print("</b> &nbsp; ");

	if( !f.endsWith('/') ) {
	    if( expand ) { %><a href="?f=<%=f%>&expand=0">collapse</a> <% } else { %><a href="?f=<%=f%>&expand=1">expand</a> <% }
	    print("\n");
	}
	else print("\n");
	print("\n");
    }

    // collapsing of source code to "..."
    function crunch(s) { 
	var i = s.indexOf('{');
	if( i < 0 )
	    return s;

	// todo: handle braces in comments.  not handled yet.
	var firstBrace = i;
	var bcount = 1;
	var lncomment = false;
	var blockcomment = false;
	var stringlit = false;
	var ch = '{';
	while( 1 ) {
	    i++;
	    if( i >= s.length )
		return s;
	    var prev = ch;
	    var ch = s.charAt(i);
	    if( blockcomment ) { 
		if( ch == '/' && prev == '*' )
		    blockcomment = false;
		continue;
	    }
	    if( lncomment ) { 
		if( ch == '\n' )
		    lncomment = false;
		continue;
	    }
	    if( ch == '*' && prev == '/' ) { 
		blockcomment = true;
		continue;
	    }
	    if( ch == '/' && prev == '/' ) { 
		lncomment = true;
		continue;
	    }
	    if( stringlit ) { 
		if( ch == '"' && prev != '\\' )
		    stringlit = false;
		continue;
	    }
	    if( ch == '"' && prev != '\\') {
		stringlit = ch;
		continue;
	    }

	    if( ch == '{' )
		bcount++;
	    if( ch == '}' )
		if( --bcount <= 0 )
		    break;
	}

	// braces from firstBrace..i
	return s.substring(0,firstBrace) + " ... " + s.substring(i+1);
    }

    function prep(s) { 
	if( expand ) 
	    return s;

	var f = s.split(/function/);
	var n = f.length;
	var res = "";
	if( n )
	    res = f[0];
	for( var i = 1; i < n; i++ ) { 
	    //	    res += "FUNCTION";
	    res = res + "function" + crunch(f[i]);
	}
	s = res;


	/*
	//s = s.replace(/\{\}/, "");
	var done;
	while( 1 ) {
	    done = true;
	    s = s.replace( /\{[^{}]*\}/, function() { done=false; return "BLOCK" } );
	    if( done ) break;
	}
	
	var i = 1;
	while( 1 ) { 
	    //	    print("\n<hr>pass " + i + "\n");
	    //	    print(s);

	    done = true;
	    s = s.replace(/function([^{}]*)\{[^{}]*\}/m, function(x,a) { 
			//		    print("x=" + x + "\n<hr>");
			//		    print("a=" + a + "\n<hr>");
		    done = false;
		    return "~FUNC~"+a+" ... ";
		});
	    if( done ) 
		break;
	    i++;
	}
	s = s.replace(/~FUNC~/g, "function");

        */

	return s;
    }

    function prepLine(s) {
	// hotlink any http://... strings
	s=s.replace(/\b(http:\/\/[^ ]+)/, '<a href="$1">$1</a>');

	// hotlink core.include()
	s=s.replace(/([ \t]*)core\.(.*?)\( *\) *;/, function(m,a,b) {
		var path = b.replace(/\./g, '/');
		return a + '<a href="http://corejs.10gen.com/admin/doc?f=/' + path + '">core.' + b + '</a>();';
	    });

	// hotlink jxp.include();
	s=s.replace(/([ \t]*)jxp\.(.*?)\( *\) *;/, function(m,a,b) {
		var path = b.replace(/\./g, '/');
		return a + '<a href="/admin/doc?f=/' + path + '">jxp.' + b + '</a>();';
	    });

	return s;
    }

    function show(s) {
	s = s.replace(/&/g, '&amp;');
	s = s.replace(/</g, '&lt;');

	var lines = s.split('\n');
	var str = "";
	for( var l in lines ) {
	    var ln = prepLine(lines[l]);
	    str += ln;
	    str += '\n';
	}
	str = prep(str);
	print(str);
    }

    if ( request.f ){
	var filename = request.f;

	if( filename.endsWith('/') ) {
	    if( filename == '/' )
		print("/\n\n");
	    else
		breadcrumbs(filename);

	    var ff = openFile(filename);
	    if( ff ) { 
		var files = ff.listFiles();
		files = files.sort(function(a,b) {
		    if( a.isDirectory() && !b.isDirectory() ) return -1;
		    if( b.isDirectory() && !a.isDirectory() ) return 1;
		    if( a.filename < b.filename ) return -1;
		    if( b.filename < a.filename ) return 1;
		    return 0;
		});

		for( var i in files ) { 
		    var fil = "" + files[i];
		    if( !fil.endsWith('~') && !fil.startsWith('.') ) {
			var dirchar = (files[i].isDirectory()?'/':'');
			print( '<a href="?f=' + filename + fil + dirchar + '">' + files[i] + dirchar + '</a>\n' );
		    }
		}
	    }

	} else {

	    var theFile = openFile( filename ); 

	    if( !theFile.exists() && !filename.match(/[.]/) ) {
		// wiki sends us corejs links with '.js', '.jxp' on the end.  try to guess extension.
		// wiki wikiparser.js, this.programmer
		theFile = openFile( filename + ".js" );
		if( theFile.exists() )
		    filename += ".js";
		else { 
		    theFile = openFile( filename + ".jxp" );
		    if( theFile.exists() ) filename += ".jxp";
		    else { 
			theFile = openFile(filename+".html");
			if( theFile.exists() ) filename += ".html";
		    }
		}
	    }

	    breadcrumbs(filename);

	    if ( theFile.exists() ){
		var data = theFile.getDataAsString();
		if( isCore ) {
		    var isJxp = filename.endsWith(".jxp");
		    if( isJxp ) print("&lt;% ");
		    print("// Copyright 2008 10gen.  Some rights reserved; see www.10gen.com/wiki/license.");
		    if( isJxp ) print(" %&gt;");
		    print("\n");
		}
		show(data);
	    }
	    else {
		print( "file " + filename + " not found" );
	    } 
	}
      }
      else {
	print( "no file to view specified" );
      }
%>

</pre>
