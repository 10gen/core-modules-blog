<%
/* everyone is allowed to read the source code in corejs and samples. */
    var _openAccess = false;

// AJAX functions that do not require headers/footers
var ajaxFunctions = [ "showTable", "table", "editCron", "blog/autosave", "doc" ];

_openAccess =
    request.getURI().match( /^.admin\/doc$/ ) &&
    ( request.getHost() == "corejs.10gen.com" || request.getHost() == "samples.10gen.com");

core.user.user();
core.user.auth();

if ( ! user ){
    user = Auth.getUser( request );
}

var sectionName = request.getURI().replace( /.*admin\/*/ , "" ).replace( /\.jxp/ , "" );
sectionName = sectionName.replace(/^\/(index)?$/, '');
if ( sectionName.endsWith("/") && sectionName.length > 1 )
    sectionName += "index";

if ( sectionName == "" || sectionName.match( /^index/ ) )
    sectionName = "welcome";

var allowed = _openAccess;

/*
 *  check to see if the site set permissioning for the admin module.  if not, make a dummy that returns false as this is 
 *  testing for non-admin users
 */
var perm = (allowModule && allowModule.admin) ? allowModule.admin.permissions : { allowed : function() { return false; }};
	
if( ! allowed && user && perm.allowed(user, request, sectionName) )
    allowed = true;

if ( ! allowed && user && user.isAdmin() ){
    allowed = true;
}

if ( ! allowed ){
    return Auth.cookie.reject( request , response , null, {reason: "You cannot access the admin application because you are not an admin."});
}

var sectionMap = core.admin.data.sectiontree().reverse;

var sectionList = sectionMap[sectionName];

// map main sections to default pages
var defaultPage = {
    'statistics' : 'usage',
    'database' : 'dbview',
    'logs' : 'logScroll'
    };

var section = null;

var sectionHeader = null;
var sectionFooter = null;

if ( sectionName.match( /^my\// ) && jxp.admin ){
    section = jxp.admin[ sectionName.substring( 3 )];
    if ( section && jxp.admin.pieces ){
        sectionHeader = jxp.admin.pieces.header;
        sectionFooter = jxp.admin.pieces.footer;
    }
}

if ( section == null && sectionName.match( /\// ) ){
    var idx = sectionName.indexOf( "/" );
    var moduleName = sectionName.substring( 0 , idx );
    var piece = sectionName.substring( idx + 1 );

    var locations = [core[moduleName], core.app[moduleName]];
    for(var i in locations){
        var moduleThing = locations[i];
        if ( moduleThing && moduleThing.admin && moduleThing.admin[ piece ] ){
            section = moduleThing.admin[piece];
            if ( section && moduleThing.admin.pieces ){
                sectionHeader = moduleThing.admin.pieces.header;
                sectionFooter = moduleThing.admin.pieces.footer;
            }
            break;
        }
    }
}

if ( section == null ) {
    if(defaultPage[sectionName])
        section = core.admin[ defaultPage[sectionName] ];
    else
        section = core.admin[ sectionName ];
}

if ( isFunction( section ) &&
     ( section.getName().match( /\._/ )
       || section.getName().match( /admin.ed/ ) ) ){
    section();
    return;
}

if ( ajaxFunctions.indexOf(sectionName) == -1 ) {
    core.admin.pieces.header({sectionList: sectionList,
                             });

    if ( isFunction( sectionHeader ) )
        sectionHeader();
}

if ( isFunction( section ) )
    section();
else {
    print( "<p>Welcome <b>" +  user.name  + "</b> to the admin section for <b>" +  db.getName() + "</b>" );
    if ( jxp.admin && jxp.admin[ "_index" ] )
        jxp.admin[ "_index" ]();
}

if ( ajaxFunctions.indexOf(sectionName) == -1 ) {
   if ( isFunction( sectionFooter ) )
       sectionFooter();

    core.admin.pieces.footer();
}
%>
